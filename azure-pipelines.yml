# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'rgtorpila'
  imageRepository: 'torpilaflaskapp'
  containerRegistry: 'rgtorpila.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscriptionName: 'svc-torpila'
  resourceGroupName: 'resourcegroup-test'
  containerInstanceName: 'container-test'
  dnsLabelName: 'echipa-torpila'
  rg-location: 'westeurope'
  vmImageName: 'ubuntu-latest'
  k8sNamespace: 'aks-torpila-ns'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: 'manifests'

- stage: Deploy
  variables:
  - group: 'torpila-vg'
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:

  - deployment: Deploy_ACI
    displayName: Deploy to ACI
    environment: 'container-env'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Create Azure Container Instance'
            inputs:
              azureSubscription: $(azureSubscriptionName)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az container create \
                  --resource-group $(resourceGroupName) \
                  --name $(containerInstanceName) \
                  --image $(containerRegistry)/$(imageRepository):$(tag) \
                  --cpu 1 \
                  --memory 1 \
                  --registry-login-server $(containerRegistry) \
                  --registry-username $(secret-CRusername) \
                  --registry-password $(rgtorpila-cr-secret) \
                  --dns-name-label $(dnsLabelName) \
                  --ip-address public --ports 5000



  - deployment: Deploy_AKS
    displayName: Deploy to AKS
    pool:
      vmImage: $(vmImageName)
    environment: 'k8s-env' #customize with your environment
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'aks-svc-toripla'
              namespace: '$(k8sNamespace)'
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yml
                $(System.ArtifactsDirectory)/manifests/service.yml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(acr-secret)'


- stage: Test
  displayName: Test stage
  dependsOn: Deploy
  condition: succeeded()
  jobs:

  - job: GetContainerLocation #This job can be easily transofmred to check for the IP adress instead of the FQDN...
    displayName: 'Get container location'
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: AzureCLI@2
        displayName: 'Get container location'
        inputs:
          azureSubscription: $(azureSubscriptionName)
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            containerLocation=$(az container show --resource-group $(resourceGroupName) --name $(containerInstanceName) --query location -o tsv)
            echo "##vso[task.setvariable variable=containerLocation;isOutput=true]$containerLocation"
            echo "container location is $containerLocation"
        name: containerLocTask


  - job: Test_Liveness
    dependsOn: GetContainerLocation
    displayName: Test liveness endpoint
    pool:
      vmImage: $(vmImageName)
    variables:
      containerLocation: $[ dependencies.GetContainerLocation.outputs['containerLocTask.containerLocation'] ]
    steps:
    - script: |
        curl -i http://$(dnsLabelName).$(containerLocation).azurecontainer.io:5000/liveness
      displayName: 'Test liveness endpoint'

        



