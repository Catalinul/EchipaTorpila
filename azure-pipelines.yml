# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '4851eccd-26ec-4ee2-a63e-d2e090506cf9'
  imageRepository: 'torpilaflaskapp'
  containerRegistry: 'rgtorpila.azurecr.io'
  containerRegistryUsername: 'rgtorpila'
  containerRegistryPassword: 'sbDWXd/0U3QxboWZRGcyx6Khm+ftjgeq506fawYf/3+ACRCphr0T'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscriptionName: 'svc-torpila'
  resourceGroupName: 'resourcegroup-test'
  containerInstanceName: 'container-test'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: Deploy to Azure Container Instances
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      displayName: 'Azure CLI Login'
      inputs:
        azureSubscription: $(azureSubscriptionName)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'docker login $(containerRegistry) --username $(containerRegistryUsername) --password $(containerRegistryPassword)'
    - script: |
        az container create --name $(containerInstanceName) --resource-group $(resourceGroupName) --image $(containerRegistry)/$(imageRepository):$(tag) --registry-login-server $(containerRegistry) --registry-username $(containerRegistryUsername) --registry-password $(containerRegistryPassword) --ip-address public
      displayName: 'Create Container Instance'

