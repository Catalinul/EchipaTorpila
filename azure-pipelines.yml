# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'rgtorpila'
  imageRepository: 'torpilaflaskapp'
  containerRegistry: 'rgtorpila.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscriptionName: 'svc-torpila'
  resourceGroupName: 'resourcegroup-test'
  containerInstanceName: 'container-test'
  dnsLabelName: 'echipa-torpila'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Deploy
  variables:
  - group: 'torpila-vg'
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'container-env'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Create Azure Container Instance'
            inputs:
              azureSubscription: $(azureSubscriptionName)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az container create \
                  --resource-group $(resourceGroupName) \
                  --name $(containerInstanceName) \
                  --image $(containerRegistry)/$(imageRepository):$(tag) \
                  --cpu 1 \
                  --memory 1 \
                  --registry-login-server $(containerRegistry) \
                  --registry-username $(secret-CRusername) \
                  --registry-password $(rgtorpila-cr-secret) \
                  --dns-name-label $(dnsLabelName) \
                  --ip-address public --ports 5000

- stage: Check_Liveness
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: Send_Curl_Request
    steps:
    - task: AzureCLI@2
      displayName: 'Retrieve container IP and port'
      inputs:
        azureSubscription: $(azureSubscriptionName)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          container=$(az container show \
            --resource-group $(resourceGroupName) \
            --name $(containerInstanceName) \
            --query ipAddress.ip --output tsv)
          port=$(az container show \
            --resource-group $(resourceGroupName) \
            --name $(containerInstanceName) \
            --query ipAddress.ports[0].port --output tsv)
          echo "Container URL: http://$container:$port"

   
    - task: PowerShell@2
      displayName: 'Send HTTP request to liveness endpoint'
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest 'http://$(container):$(port)/liveness'
    continueOnError: false

        



